---
- ansible.builtin.import_role:
    name: rmblr.service_pre

- name: set container pod members
  set_fact:
    pod_members:
      - redis
      - server
      - worker
      - nginx

- name: traefik service
  import_role:
    name: rmblr.traefik_redis_service

- name: create local dirs
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: root
    group: root
    mode: 0750
  loop:
    - "{{ inventree_base_volume_host_path }}/backups"
    - "{{ inventree_base_volume_host_path }}/media"

- name: template nginx config
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "{{ service_nginx_dir }}/nginx.conf"
    user: "{{ container_vol_uid }}"
    group: "{{ container_vol_uid }}"
    mode: 0750

- name: pod
  when: container_state == "started" and not container_remove
  containers.podman.podman_pod:
    name: "{{ container_name }}"
    infra_name: "{{ container_name }}-infra"
    state: created
    publish:
      - 0.0.0.0:80:8080
    network: "{{ container_podman_network }}"
    hostname: "{{ service_fqdn }}"


- name: redis container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-redis"
    pod: "{{ container_name }}"
    image: docker.io/library/redis:7
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volumes:
      - "{{ service_redis_dir }}:/data:z"
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"

- name: nginx container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-nginx"
    pod: "{{ container_name }}"
    image: docker.io/nginxinc/nginx-unprivileged:stable
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volume:
      - "{{ service_data_dir }}:/var/www:ro"
      - "{{ inventree_base_volume_host_path }}/media:/var/www/media:ro"
      - "{{ service_nginx_dir }}/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"


- name: server container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-server"
    pod: "{{ container_name }}"
    image: docker.io/inventree/inventree:stable
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volume:
      - "{{ inventree_base_volume_host_path }}/media:/home/inventree/data/media"
      - "{{ inventree_base_volume_host_path }}/backups:/home/inventree/data/backups"
      - "{{ service_data_dir }}:/home/inventree/data"
    command: /bin/sh -c 'set -ex; invoke update --skip-backup; gunicorn -c ./gunicorn.conf.py InvenTree.wsgi -b 0.0.0.0:8000 --chdir ./InvenTree;'
    env: "{{ inventree_env }}"

- name: worker container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-worker"
    pod: "{{ container_name }}"
    image: docker.io/inventree/inventree:stable
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    command: invoke worker
    volume:
      - "{{ inventree_base_volume_host_path }}/media:/home/inventree/data/media"
      - "{{ inventree_base_volume_host_path }}/backups:/home/inventree/data/backups"
      - "{{ service_data_dir }}:/home/inventree/data"
    env: "{{ inventree_env }}"

- name: generate pod systemd
  containers.podman.podman_generate_systemd:
    new: true
    name: "{{ container_name }}"
    dest: /usr/local/lib/systemd/system
    no_header: true
    restart_policy: always
    restart_sec: 10
  when: not container_remove
  notify: restart service

- name: Backup job
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=inventree run backup
      After=pod-{{ container_name }}.service
      Requires=pod-{{ container_name }}.service

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/podman exec -it {{ container_name }}-server invoke export-records -f /home/inventree/data/backup-data.json
      User=root
      KillMode=process
      StandardInput=tty

      [Install]
      WantedBy=multi-user.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-backup.service
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Backup job timer
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Run inventree backup

      [Timer]
      OnCalendar=*-*-* 22:30:00
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-backup.timer
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Remove job timers
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  loop:
    - /usr/local/lib/systemd/system/{{ container_name }}-job-backup.service
    - /usr/local/lib/systemd/system/{{ container_name }}-job-backup.timer
  when: container_remove
  notify: systemd daemon reload

- ansible.builtin.import_role:
    name: rmblr.service_post
