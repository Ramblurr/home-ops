---
- ansible.builtin.import_role:
    name: rmblr.service_pre

- name: set container pod members
  set_fact:
    pod_members:
      - broker
      - webserver
      - gotenberg
      - tika

- name: Prevent backups of transient dirs
  ansible.builtin.file:
    path: "{{ item  }}"
    state: touch
    owner: "{{ container_vol_user }}"
    group: "{{ container_vol_user }}"
    mode: 0640
    access_time: preserve
    modification_time: preserve
  loop: []

- set_fact:
    paperless_base_volumes:
      - "{{ service_data_dir }}:/usr/src/paperless/data:z"
      - "{{ paperless_base_volume_host_path }}/export:/usr/src/paperless/export"
      - "{{ paperless_base_volume_host_path }}/inbox:/usr/src/paperless/consume"
      - "{{ paperless_base_volume_host_path }}/media:/usr/src/paperless/media"


- name: traefik service
  import_role:
    name: rmblr.traefik_redis_service

- name: pod
  when: container_state == "started" and not container_remove
  containers.podman.podman_pod:
    name: "{{ container_name }}"
    infra_name: "{{ container_name }}-infra"
    state: created
    publish:
      - 0.0.0.0:80:8000
    network: "{{ container_podman_network }}"
    hostname: "{{ service_fqdn }}"


- name: redis container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-redis"
    pod: "{{ container_name }}"
    image: docker.io/library/redis:7
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volumes:
      - "{{ service_redis_dir }}:/data:z"
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"

- name: gotenberg container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-gotenberg"
    pod: "{{ container_name }}"
    image: docker.io/thecodingmachine/gotenberg:latest
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"
    env:
      DISABLE_GOOGLE_CHROME: 1

- name: tika container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-tika"
    pod: "{{ container_name }}"
    image: docker.io/apache/tika:latest
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"

- name: paperless container started
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-paperless"
    pod: "{{ container_name }}"
    image: docker.io/jonaswinkler/paperless-ng:latest
    state: present
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volume: |
      {{ paperless_base_volumes
      + paperless_extra_volumes | default([])
      }}
    env:
      USERMAP_UID: "{{ container_vol_uid }}"
      USERMAP_GID: "{{ container_vol_uid }}"
      PAPERLESS_REDIS: redis://localhost:6379
      PAPERLESS_DBHOST: "{{ paperless_settings.db_host }}"
      PAPERLESS_DBUSER: "{{ paperless_settings.db_username }}"
      PAPERLESS_DBPASS: "{{ paperless_settings.db_password }}"
      PAPERLESS_DBNAME: "{{ paperless_settings.db_name }}"
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://localhost:3000
      PAPERLESS_TIKA_ENDPOINT: http://localhost:9998
      PAPERLESS_TIME_ZONE: Europe/Berlin
      PAPERLESS_CONSUMER_POLLING: 5
      PAPERLESS_CONSUMER_POLLING_DELAY: 30

    healthcheck: "curl -f http://localhost:8000"
    healthcheck_start_period: 10s
    healthcheck_timeout: 10s
    healthcheck_interval: 30s
    healthcheck_retries: 5

- name: generate pod systemd
  containers.podman.podman_generate_systemd:
    new: true
    name: "{{ container_name }}"
    dest: /usr/local/lib/systemd/system
    no_header: true
    restart_policy: always
    restart_sec: 10
  when: not container_remove
  notify: restart service

- name: Backup job
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=paperless-ng run backup
      After=pod-{{ container_name }}.service
      Requires=pod-{{ container_name }}.service

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/podman exec -it {{ container_name }}-paperless document_exporter ../export
      User=root
      KillMode=process
      StandardInput=tty

      [Install]
      WantedBy=multi-user.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-backup.service
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Backup job timer
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Run paperless-ng backup

      [Timer]
      OnCalendar=*-*-* 22:30:00
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-backup.timer
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Remove job timers
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  loop:
    - /usr/local/lib/systemd/system/{{ container_name }}-job-backup.service
    - /usr/local/lib/systemd/system/{{ container_name }}-job-backup.timer
  when: container_remove
  notify: systemd daemon reload

- ansible.builtin.import_role:
    name: rmblr.service_post
