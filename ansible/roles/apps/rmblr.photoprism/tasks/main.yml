---

- ansible.builtin.import_role:
    name: rmblr.service_pre

- name: set container pod members
  set_fact:
    pod_members:
      - photoprism
      - mariadb

- name: Prevent backups of transient dirs
  ansible.builtin.file:
    path: "{{ item  }}"
    state: touch
    owner: "{{ container_vol_user }}"
    group: "{{ container_vol_user }}"
    mode: 0640
    access_time: preserve
    modification_time: preserve
  loop: []

- set_fact:
    photoprism_base_volumes:
      - "{{ service_data_dir }}:/photoprism:z"
      - "{{ photoprism_base_volume_host_path }}/originals:/photoprism/originals"
      - "{{ photoprism_base_volume_host_path }}/import:/photoprism/import"
      - "{{ photoprism_base_volume_host_path }}/backups:/photoprism/backups"

- debug:
    var: photoprism_extra_volumes

- name: traefik service
  import_role:
    name: rmblr.traefik_redis_service

- name: pod
  when: container_state == "started" and not container_remove
  containers.podman.podman_pod:
    name: "{{ container_name }}"
    infra_name: "{{ container_name }}-infra"
    state: created
    publish:
      - 0.0.0.0:80:2342
    network: "{{ container_podman_network }}"
    hostname: "{{ service_fqdn }}"

- name: mariadb container started
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-mariadb"
    pod: "{{ container_name }}"
    image: docker.io/library/mariadb:10.11
    command: mysqld --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    state: present
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volume:
      - "{{ service_db_dir }}:/var/lib/mysql:z"
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"
    env:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_ROOT_PASSWORD: "{{ photoprism_db_root_password }}"
      MARIADB_DATABASE: "{{ photoprism_db_database }}"
      MARIADB_USER: "{{ photoprism_db_username }}"
      MARIADB_PASSWORD: "{{ photoprism_db_password }}"

- name: photoprism container started
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-photoprism"
    pod: "{{ container_name }}"
    image: docker.io/photoprism/photoprism:latest
    state: present
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volume: |
      {{ photoprism_base_volumes
      + photoprism_extra_volumes | default([])
      }}
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"
    env:
      PHOTOPRISM_ADMIN_PASSWORD: "{{ photoprism_admin_password }}"
      PHOTOPRISM_SITE_URL: "http://{{ service_fqdn }}/"
      PHOTOPRISM_ORIGINALS_LIMIT: 10000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_DEBUG: "false"                      # run in debug mode (shows additional log messages)
      PHOTOPRISM_PUBLIC: "false"                     # no authentication required (disables password protection)
      PHOTOPRISM_READONLY: "false"                   # don't modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "true"               # disables storage permission updates on startup
      PHOTOPRISM_DISABLE_WEBDAV: "true"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables Settings in Web UI
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables facial recognition
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification
      PHOTOPRISM_DARKTABLE_PRESETS: "false"          # enables Darktable presets and disables concurrent RAW conversion
      PHOTOPRISM_DETECT_NSFW: "false"                # flag photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: "{{ photoprism_db_server }}"     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "{{ photoprism_db_database }}"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: "{{ photoprism_db_username }}"         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: "{{ photoprism_db_password }}"       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_TITLE: "{{ photoprism_title | default('') }}"
      PHOTOPRISM_SITE_CAPTION: "{{ photoprism_caption | default('AI-Powered Photos App') }}"
      PHOTOPRISM_SITE_DESCRIPTION: ""
      PHOTOPRISM_SITE_AUTHOR: ""
      # PHOTOPRISM_UID: "{{ container_vol_uid }}"
      # PHOTOPRISM_GID: "{{ container_vol_uid }}"
      PHOTOPRISM_SPONSOR: true
      PHOTOPRISM_BACKUP_PATH: /photoprism/storage/backup/index-backup.sql
      HOME: "/photoprism"
    working_dir: "/photoprism"
    healthcheck: "photoprism status"
    healthcheck_start_period: 10s
    healthcheck_timeout: 15s
    healthcheck_interval: 60s
    healthcheck_retries: 5

- name: generate pod systemd
  containers.podman.podman_generate_systemd:
    new: true
    name: "{{ container_name }}"
    dest: /usr/local/lib/systemd/system
    no_header: true
    restart_policy: always
    restart_sec: 10
  when: not container_remove
  notify: restart service

- name: Index job
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Photoprism run index
      After=pod-{{ container_name }}.service
      Requires=pod-{{ container_name }}.service

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/podman exec {{ container_name }}-photoprism photoprism index --cleanup
      User=root
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-index.service
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Index job timer
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Run photoprism indexer

      [Timer]
      OnCalendar=*-*-* 13:30:00
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-index.timer
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Convert job
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Photoprism run video conveerter
      After=pod-{{ container_name }}.service
      Requires=pod-{{ container_name }}.service

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/podman exec {{ container_name }}-photoprism photoprism convert
      User=root
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-convert.service
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Convert job timer
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Run photoprism video converter

      [Timer]
      OnCalendar=*-*-* 09:30:00
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-convert.timer
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Import job
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Photoprism run import
      After=pod-{{ container_name }}.service
      Requires=pod-{{ container_name }}.service

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/podman exec {{ container_name }}-photoprism photoprism import
      User=root
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-import.service
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Import job timer
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Run photoprism import

      [Timer]
      OnCalendar=hourly
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-import.timer
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Backup job
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Photoprism run backup
      After=pod-{{ container_name }}.service
      Requires=pod-{{ container_name }}.service

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/podman exec {{ container_name }}-photoprism photoprism backup --albums --index --force
      User=root
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-backup.service
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Backup job timer
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Run photoprism import

      [Timer]
      OnCalendar=*-*-* 23:30:00
      Persistent=true

      [Install]
      WantedBy=timers.target
    dest: /usr/local/lib/systemd/system/{{ container_name }}-job-backup.timer
    owner: root
    group: root
    mode: 0776
  notify: job timers
  when: not container_remove

- name: Remove job timers
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  loop:
    - /usr/local/lib/systemd/system/{{ container_name }}-job-import.service
    - /usr/local/lib/systemd/system/{{ container_name }}-job-index.service
    - /usr/local/lib/systemd/system/{{ container_name }}-job-convert.service
    - /usr/local/lib/systemd/system/{{ container_name }}-job-backup.service
    - /usr/local/lib/systemd/system/{{ container_name }}-job-import.timer
    - /usr/local/lib/systemd/system/{{ container_name }}-job-index.timer
    - /usr/local/lib/systemd/system/{{ container_name }}-job-convert.timer
    - /usr/local/lib/systemd/system/{{ container_name }}-job-backup.timer
  when: container_remove
  notify: systemd daemon reload

- ansible.builtin.import_role:
    name: rmblr.service_post
