---
- ansible.builtin.import_role:
    name: rmblr.service_pre

- name: configure nginx config
  template:
    src: in-vhost.conf.j2
    dest: "{{ service_conf_dir_nginx }}/in-vhost.conf"
    owner: "{{ container_vol_uid }}"
    group: "{{ container_vol_uid }}"
    mode: 0755

- name: set container pod members
  set_fact:
    pod_members:
      - app
      - nginx

- name: traefik service
  ansible.builtin.import_role:
    name: rmblr.traefik_redis_service

- name: pod
  when: container_state == "started" and not container_remove
  containers.podman.podman_pod:
    name: "{{ container_name }}"
    infra_name: "{{ container_name }}-infra"
    state: created
    publish:
      - 0.0.0.0:{{ service_port }}:8080
    network: "{{ container_podman_network }}"
    hostname: "{{ service_fqdn }}"

- name: secrets
  containers.podman.podman_secret:
    state: "{{ (container_state == 'started') | ternary('present', 'absent') }}"
    name: "{{ item.name }}"
    data: "{{ item.value }}"
    force: "{{ container_recreate }}"
    skip_existing: "{{ not container_recreate }}"
  no_log: true
  loop:
    - name: "{{ container_name }}-db-username"
      value: "{{ invoiceninja_settings.db_username }}"
    - name: "{{ container_name }}-db-password"
      value: "{{ invoiceninja_settings.db_password }}"
    - name: "{{ container_name }}-app-key"
      value: "{{ invoiceninja_settings.app_key }}"
    - name: "{{ container_name }}-mail-password"
      value: "{{ smtp_settings.password }}"

- name: nginx container created
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-nginx"
    pod: "{{ container_name }}"
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"
    image: docker.io/nginxinc/nginx-unprivileged:latest
    state: present
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volume:
      - "{{ service_data_dir_public }}:/var/www/app/public:ro"
      - "{{ service_conf_dir_nginx }}/in-vhost.conf:/etc/nginx/conf.d/in-vhost.conf:z"

- name: container created
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-app"
    pod: "{{ container_name }}"
    image: docker.io/ramblurr/invoiceninja:5
    state: present
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    memory: 2048M
    volume:
      - "{{ service_data_dir_public }}:/var/www/app/public:z"
      - "{{ service_data_dir_storage }}:/var/www/app/storage:z"
      #- "{{ container_nfs_volume_name }}:/var/www/app/storage:z"
      - "{{ service_conf_dir_psysh }}:/.config/psysh:z"
    env:
      PUID: "{{ container_vol_uid }}"
      PGID: "{{ container_vol_uid }}"
      DB_STRICT: "false"
      DB_HOST: "{{ invoiceninja_settings.db_host }}"
      DB_USERNAME_FILE: /run/secrets/{{ container_name }}-db-username
      DB_DATABASE: "{{ invoiceninja_settings.db_name }}"
      DB_PASSWORD_FILE: /run/secrets/{{ container_name }}-db-password
      TRUSTED_PROXIES: '*'
      PDF_GENERATOR: snappdf
      APP_DEBUG: "false"
      REQUIRE_HTTPS: "false"
      PHANTOMJS_PDF_GENERATION: "false"
      APP_KEY_FILE: /run/secrets/{{ container_name }}-app-key
      APP_URL: "{{ invoiceninja_settings.app_url }}"
      QUEUE_CONNECTION: database
      MAIL_MAILER: smtp
      MAIL_HOST: "{{ smtp_settings.host }}"
      MAIL_PASSWORD_FILE: /run/secrets/{{ container_name }}-mail-password
      MAIL_USERNAME: "{{ smtp_settings.username }}"
      MAIL_PORT: "{{ smtp_settings.tls_port }}"
      MAIL_FROM_NAME: "{{ invoiceninja_settings.mail_from_name }}"
      MAIL_FROM_ADDRESS: "{{ invoiceninja_settings.mail_from_address }}"
      MAIL_ENCRYPTION: tls
    secrets:
      - "{{ container_name }}-db-username"
      - "{{ container_name }}-db-password"
      - "{{ container_name }}-mail-password"
      - "{{ container_name }}-app-key"

- name: generate pod systemd
  containers.podman.podman_generate_systemd:
    new: true
    name: "{{ container_name }}"
    dest: /usr/local/lib/systemd/system
    no_header: true
    restart_policy: always
    restart_sec: 10
  when: not container_remove
  notify: restart service

- ansible.builtin.import_role:
    name: rmblr.service_post
