---
- ansible.builtin.import_role:
    name: rmblr.service_pre

- name: set container pod members
  set_fact:
    pod_members:
      - redis
      - nextcloud
      - pgbouncer

- name: Prevent backups of transient dirs
  ansible.builtin.file:
    path: "{{ item  }}"
    state: touch
    owner: "{{ container_vol_user }}"
    group: "{{ container_vol_user }}"
    mode: 0640
    access_time: preserve
    modification_time: preserve
  loop: []

- set_fact:
    service_extra_labels: "{{ service_extra_labels }}"

- name: traefik service
  import_role:
    name: rmblr.traefik_redis_service
  vars:
    service_upstream_ignorecert: true

- name: pod
  when: container_state == "started" and not container_remove
  containers.podman.podman_pod:
    name: "{{ container_name }}"
    infra_name: "{{ container_name }}-infra"
    state: created
    publish:
      - 0.0.0.0:443:443
    network: "{{ container_podman_network }}"
    hostname: "{{ service_fqdn }}"

- name: Copy pg root ca cert for pgbouncer
  copy:
    src: "{{ postgresql_tls_ca_file }}"
    dest: "{{ service_pgbouncer_dir }}/root-ca.pem"
    owner: "{{ container_vol_user }}"
    group: "{{ container_vol_user }}"
    mode: 0750

- name: pgbouncer container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-pgbouncer"
    pod: "{{ container_name }}"
    image: docker.io/bitnami/pgbouncer:1
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    #user: "{{ container_vol_uid }}:{{ container_vol_uid }}"
    volumes:
      - "{{ service_pgbouncer_dir }}/root-ca.pem:/root-ca.pem:ro"
    env:
      POSTGRESQL_USERNAME: "{{ nextcloud_settings.db_username }}"
      POSTGRESQL_PASSWORD: "{{ nextcloud_settings.db_password }}"
      POSTGRESQL_DATABASE: "{{ nextcloud_settings.db_name }}"
      POSTGRESQL_HOST: "{{ nextcloud_settings.db_host }}"
      PGBOUNCER_DATABASE: "{{ nextcloud_settings.db_name }}"
      PGBOUNCER_SERVER_TLS_SSLMODE: require
      PGBOUNCER_SERVER_TLS_CA_FILE: "/root-ca.pem"

- name: redis container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-redis"
    pod: "{{ container_name }}"
    image: docker.io/library/redis:7
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volumes:
      - "{{ service_redis_dir }}:/data:z"
    user: "{{ container_vol_uid }}:{{ container_vol_uid }}"
    command: [--save, 60, 1, --notify-keyspace-events, AKE, --requirepass, "{{ nextcloud_settings.redis_password }}"]

#- name: build default nextcloud container mounts
#  set_fact:
#    nextcloud_default_volumes:
#      - "{{ service_conf_dir }}:/config:z"
#      - "{{ nextcloud_base_volume_host_path }}:/data"

#- name: build nextcloud container mounts
#  set_fact:
#    nextcloud_volumes: "{{ nextcloud_default_volumes }} + {{ container_extra_volumes | default([]) }}"

- name: nextcloud container
  when: container_state == "started" and not container_remove
  containers.podman.podman_container:
    name: "{{ container_name }}-nextcloud"
    pod: "{{ container_name }}"
    image: quay.io/linuxserver.io/nextcloud:{{ container_image_tag }}
    state: created
    recreate: "{{ container_recreate }}"
    labels:
      io.containers.autoupdate: registry
    volumes: #"{{ nextcloud_volumes }}"
      - "{{ service_conf_dir }}:/config:z"
      - "{{ nextcloud_base_volume_host_path }}:/data"
    tmpfs:
      /run: mode=1777
      /tmp: mode=1777
    env: &nc-env
      REDIS_HOST: 127.0.0.1
      PUID: "{{ container_vol_uid }}"
      PGID: "{{ container_vol_uid }}"

- name: generate pod systemd
  containers.podman.podman_generate_systemd:
    new: true
    name: "{{ container_name }}"
    dest: /usr/local/lib/systemd/system
    no_header: true
    restart_policy: always
    restart_sec: 10
  when: not container_remove
  notify: restart service

- ansible.builtin.import_role:
    name: rmblr.service_post
