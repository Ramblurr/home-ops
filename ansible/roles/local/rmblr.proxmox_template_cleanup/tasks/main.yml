---
- block:
    - name: delete all linux headers
      shell: >
        dpkg --get-selections |  awk '{ print $1 }' | grep 'linux-headers' | xargs --no-run-if-empty apt-get -y purge

    - name: delete specific linux kernels
      shell: >
        dpkg --get-selections |  awk '{ print $1 }' | grep 'linux-image-.*-generic' | grep -v `uname -r` | \
        xargs --no-run-if-empty apt-get -y purge

    - name: delete linux source
      shell: >
        dpkg --get-selections |  awk '{ print $1 }' | grep linux-source | xargs --no-run-if-empty apt-get -y purge

    - name: get development packages
      shell: >
        dpkg --get-selections |  awk '{ print $1 }' | grep -- '-dev$'
      register: _development_packages
      failed_when: false

    - name: delete development packages
      apt:
        name: "{{ item }}"
        state: absent
        purge: true
      when: item not in template_cleanup_development_exclude
      with_items: "{{ _development_packages.stdout_lines | default([]) }}"

    - name: get docs packages
      shell: >
        dpkg --get-selections |  awk '{ print $1 }' | grep -- '-doc$'
      register: _doc_packages
      failed_when: false

    - name: delete doc packages
      apt:
        name: "{{ item }}"
        state: absent
        purge: true
      when: item not in template_cleanup_doc_exclude
      with_items: "{{ _doc_packages.stdout_lines | default([]) }}"

    - name: delete more packages
      apt:
        name: "{{ template_cleanup_more }}"
        state: absent
        purge: true

    - name: apt clean and autoremove
      command: >
        apt-get -y {{ item }}
      args:
        warn: false
      with_items:
        - clean
        - autoremove

    - name: remove files
      command: >
        rm -rfv {{ item }}
      args:
        warn: false
      register: _remove_files
      changed_when: _remove_files.stdout_lines | default([]) | length > 0
      with_items:
        - /root/.cache/pip
        - /var/lib/dhclient/

    - name: remove files
      shell: >
        {{ item }}
      register: _remove_files
      changed_when: _remove_files.stdout_lines | default([]) | length > 0
      with_items:
        # caches
        - find /var/cache -type f -print0 | xargs --no-run-if-empty -0 rm -fv
        # log files
        - find /var/log -type f -print0 | xargs --no-run-if-empty -0 rm -fv

    - name: blank netplan machine-id
      copy:
        content: ""
        dest: /etc/machine-id
        force: true
        group: root
        owner: root
        mode: 0444
  when: ansible_os_family == "Debian"

- name: cloud-init clean
  command: >
    cloud-init clean --logs --seed
