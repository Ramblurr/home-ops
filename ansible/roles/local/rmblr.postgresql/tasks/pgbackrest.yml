---
# yamllint disable rule:line-length
- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- block:
    - name: Ensure log directory exist
      file:
        path: "/var/log/pgbackrest"
        state: directory
        owner: postgres
        group: postgres
        mode: 0770

    - debug:
        var: postgresql_data_dir

    - name: Ensure config directory exist
      file:
        path: "{{ pgbackrest_conf_file | dirname }}"
        state: directory

    - name: "Generate conf file {{ pgbackrest_conf_file }}"
      template:
        src: pgbackrest.conf.j2
        dest: "{{ pgbackrest_conf_file }}"
        owner: postgres
        group: postgres
        mode: 0644

- name: Ensure backup mount exists
  stat:
    path: "{{ postgresql_backup_mount }}"
  register: backup_dir_mounted

- assert:
    that:
      - backup_dir_mounted.stat.isdir is defined
      - backup_dir_mounted.stat.isdir
    msg: the backup mount point {{ postgresql_backup_mount }} does not exist. is the backup destination mounted?

- name: Ensure backup dir exists and is writable
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pgbackrest_repo_user }}"
    group: "{{ pgbackrest_repo_user }}"
  with_items:
    - "{{ postgresql_backup_mount }}"
    - "{{ postgresql_backup_dir }}"

- name: Restore config
  when: postgresql_restoring
  block:
    - name: Ensure backup restore exists
      stat:
        path: "{{ postgresql_restore_mount }}"
      register: restore_dir_mounted

    - assert:
        that:
          - restore_dir_mounted.stat.isdir is defined
          - restore_dir_mounted.stat.isdir
        msg: the restore mount point {{ postgresql_restore_mount }} does not exist. is the restore destination mounted?

    - name: Ensure restore dir exists and is writable
      file:
        path: "{{ postgresql_restore_mount }}"
        state: directory
        owner: "{{ pgbackrest_repo_user }}"
        group: "{{ pgbackrest_repo_user }}"

    - name: Generate restore conf file {{ pgbackrest_conf_file }}
      template:
        src: pgbackrest-restore.conf.j2
        dest: "{{ pgbackrest_conf_restore_file }}"
        owner: postgres
        group: postgres
        mode: 0644

- name: Enable archive mode
  lineinfile:
    path: "{{ postgresql_data_dir }}/postgresql.conf"
    regexp: "^#?archive_mode =.*"
    line: archive_mode = on
  register: archive_mode_changed

- name: Set archive command
  lineinfile:
    path: "{{ postgresql_data_dir }}/postgresql.conf"
    regexp: "^#?archive_command =.*"
    line: >-
      archive_command = 'pgbackrest --config={{ pgbackrest_conf_file }} --stanza={{ pgbackrest_stanza }} archive-push %p'
  register: archive_command_changed

- name: Initial restore
  when: postgresql_restoring
  block:
    - name: stop postgres
      service:
        name: postgresql
        state: stopped
    - name: restore backup
      command: >-
        pgbackrest
        --config {{ pgbackrest_conf_restore_file }}
        --stanza {{ pgbackrest_stanza }}
        --delta
        restore
      become: true
      become_user: postgres

    - name: start postgres
      service:
        name: postgresql
        state: started

- name: Restart postgres
  service:
    name: postgresql
    state: restarted
  when: archive_command_changed.changed or archive_mode_changed.changed

- name: create stanzas on the backup server
  command: >-
    pgbackrest
    --config {{ pgbackrest_conf_file }}
    --stanza {{ pgbackrest_stanza }}
    stanza-create
  become: true
  become_user: postgres
  args:
    creates: "{{ postgresql_backup_dir }}/backup/{{ pgbackrest_stanza }}/"

- name: execute the first backup
  command: >-
    pgbackrest
    --config {{ pgbackrest_conf_file }}
    --stanza {{ pgbackrest_stanza }}
    backup
  become: true
  become_user: postgres
  args:
    creates: "{{ postgresql_backup_dir }}/backup/{{ pgbackrest_stanza }}/latest"

- name: Schedule full backup job
  cron:
    name: "pgbackrest"
    minute: "0"
    hour: "0"
    day: "1"
    user: postgres
    state: present
    job: >-
      pgbackrest --config={{ pgbackrest_conf_file }} --stanza={{ pgbackrest_stanza }} backup

- name: Schedule incremental backup
  cron:
    name: "pgbackrest incremental"
    minute: "0"
    hour: "*/12"
    user: postgres
    state: present
    job: >-
      pgbackrest --config={{ pgbackrest_conf_file }} --stanza={{ pgbackrest_stanza }} --type=incr backup

- name: check last backup
  become: true
  become_user: postgres
  shell: >-
    pgbackrest --config={{ pgbackrest_conf_file }}
    --stanza={{ pgbackrest_stanza }}
    --output=json
    info
    | jq '.[0] | .backup[-1] | .timestamp.stop'
  register: last_at

- name: print last backup timestamp
  debug:
    msg: "Last backup was at {{ '%Y-%m-%d %H:%M:%S' | strftime(last_at.stdout) }}"
