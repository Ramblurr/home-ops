---
- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Set default pg version
  ansible.builtin.lineinfile:
    path: /usr/ports/Mk/bsd.default-versions.mk
    state: present
    regexp: "^PGSQL_DEFAULT.*"
    line: "PGSQL_DEFAULT?= {{ postgresql_version }}"
    backup: true

- name: Install packages
  ansible.builtin.package:
    state: present
    name: "{{ postgresql_packages }}"

- name: Build py-psycopg2
  ansible.builtin.command: make reinstall
  args:
    chdir: /usr/ports/databases/py-psycopg2

- name: Enable postgresql
  community.general.sysrc:
    name: postgresql_enable
    value: "YES"

- name: Initialize postgresql
  ansible.builtin.command: /usr/local/etc/rc.d/postgresql initdb
  args:
    creates: "{{ postgresql_data_dir }}/postgresql.conf"
  notify:
    - restart postgresql

- name: Copy tls files
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ postgresql_data_dir }}/{{ item.dest }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0600
  loop:
    - src: "{{ postgresql_tls_ca_file }}"
      dest: root.crt
    - src: "{{ postgresql_tls_key_file }}"
      dest: server.key
    - src: "{{ postgresql_tls_cert_file }}"
      dest: server.crt
  notify:
    - restart postgresql

- name: Install pg_hba.conf
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_data_dir }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0640
    backup: true
  notify:
    - restart postgresql

- name: Tweak postgresql conf
  ansible.builtin.lineinfile:
    path: "{{ postgresql_data_dir }}/postgresql.conf"
    regexp: "{{ item.regexp  }}"
    line: "{{ item.line }}"
    backup: true
  loop:
    - regexp: "^#?ssl =.*"
      line: ssl = on
    - regexp: "^#?ssl_cert_file =.*"
      line: >-
        ssl_cert_file = '{{ postgresql_data_dir }}/server.crt'
    - regexp: "^#?ssl_key_file =.*"
      line: >-
        ssl_key_file = '{{ postgresql_data_dir }}/server.key'
    - regexp: "^#?ssl_ca_file =.*"
      line: >-
        ssl_ca_file = '{{ postgresql_data_dir }}/root.crt'
    - regexp: "^#?pasword_encryption =.*"
      line: >-
        password_encryption = 'scram-sha-256'
    - regexp: "^#?listen_addresses =.*"
      line: >-
        listen_addresses = '*'
    - regexp: "^#?shared_buffers =.*"
      line: >-
        shared_buffers = 256MB
    - regexp: "^#?max_connections =.*"
      line: >-
        max_connections = 200
  notify:
    - restart postgresql

- name: check first start
  ansible.builtin.stat:
    path: /var/db/postgres/data13/postmaster.pid
  register: postmaster_file

- name: start first time
  ansible.builtin.service:
    name: postgresql
    state: started
  when: not postmaster_file.stat.isreg is defined

- meta: flush_handlers

- name: Create admin user
  become: true
  become_user: postgres
  become_method: sudo
  community.postgresql.postgresql_user:
    db: postgres
    name: "{{ postgresql_admin_user }}"
    password: "{{ postgresql_admin_password }}"
    role_attr_flags: SUPERUSER

- import_tasks: ./pgbackrest.yml
  when: pgbackrest_enabled|default(false)

- import_tasks: ./create_db_and_users.yml
