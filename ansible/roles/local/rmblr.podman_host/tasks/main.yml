---
- name: Enable prometheus-podman-exporter copr
  community.general.copr:
    state: enabled
    name: navidys/prometheus-podman-exporter

- name: install packages
  ansible.builtin.package:
    name:
      - git
      - cronie
      - crontabs
      - podman
      - podman-plugins
      - systemd-resolved
      - prometheus-podman-exporter
    state: present

- name: configure dns
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: '^#?\s*DNS='
    line: "DNS={{ local_nameservers }}"
  notify: restart systemd-resolved

- name: configure dns domains
  ansible.builtin.lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: '^#?\s*Domains='
    line: "Domains=~{{ socozy_tld }}"
  notify: restart systemd-resolved

- name: setup resolv.conf
  ansible.builtin.file:
    state: link
    force: true
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644

- name: create systemd local dir
  ansible.builtin.file:
    path: /usr/local/lib/systemd/system
    state: directory
    owner: root
    group: root
    mode: 0750

- name: create base dir
  ansible.builtin.file:
    path: "{{ service_local_data_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create nfs mount point
  when: container_nfs_base is defined
  ansible.builtin.file:
    path: "{{ container_nfs_base }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: ensure cron running
  ansible.builtin.systemd:
    name: crond
    state: started
    enabled: true

- name: create network
  containers.podman.podman_network:
    name: "{{ container_podman_network }}"
    state: present

- name: enable podman socket
  ansible.builtin.systemd:
    name: podman.socket
    state: started
    enabled: true
  notify:
    - reload firewalld

- name: create mgmt zone
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: mgmt
    state: present
    permanent: true
  notify:
    - reload firewalld
    - reload podman network

- name: open ssh for mgmt zone
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: mgmt
    state: enabled
    permanent: true
    service: ssh
  notify:
    - reload firewalld
    - reload podman network

- name: open prometheus-podman-exporter port
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: mgmt
    state: enabled
    permanent: true
    port: 9882/tcp
  notify:
    - reload firewalld
    - reload podman network

- name: add eth0 to mgmt zone
  when: firewalld_enabled
  #ansible.posix.firewalld:
  #  zone: mgmt
  #  state: enabled
  #  permanent: true
  #  interface: eth0
  #  immediate: true
  ansible.builtin.command: firewall-cmd --zone=mgmt --permanent --add-interface=eth0
  notify:
    - reload firewalld
    - reload podman network

- name: create data zone
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: data
    state: present
    permanent: true
  notify:
    - reload firewalld
    - reload podman network

- name: open ssh for data zone
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: data
    state: enabled
    permanent: true
    service: ssh
  notify:
    - reload firewalld
    - reload podman network

- name: add eth2 to data zone
  when: firewalld_enabled
  ansible.builtin.command: firewall-cmd --zone=data --permanent --add-interface=eth2
  notify:
    - reload firewalld
    - reload podman network

- name: disable cockpit on public iface
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: public
    state: disabled
    permanent: true
    service: cockpit
  notify:
    - reload firewalld
    - reload podman network

- name: allow cockpit on mgmt
  when: firewalld_enabled
  ansible.posix.firewalld:
    zone: "{{ item }}"
    state: enabled
    permanent: true
    service: cockpit
  loop: [mgmt]
  notify:
    - reload firewalld
    - reload podman network

- name: ensure prometheus-podman-exporter running
  ansible.builtin.systemd:
    name: prometheus-podman-exporter.service
    state: started
    enabled: true
