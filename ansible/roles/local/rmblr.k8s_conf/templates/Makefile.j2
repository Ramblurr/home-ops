.ONESHELL:
.SHELLFLAGS += -e -o pipefail

export ROOT := $(realpath {{ playbook_dir }}/..)
export CLUSTER := "{{ cluster_name }}"
export TALOS_DIR := $(realpath {{ cluster_talos_dir }})
export TALOS_IMAGE := "ghcr.io/siderolabs/installer:{{ cluster_talos_version }}"
export K8S_DIR := $(realpath {{ cluster_k8s_dir }})
export TALOSCONFIG := ${TALOS_DIR}/clusterconfig/talosconfig
export KUBECONFIG := ${TALOS_DIR}/kubeconfig

TC := talosctl --talosconfig ${TALOSCONFIG}
KC := kubectl
CP_IPS = {{ control_plane_ips_mgmt | join (" ") }}
CP_ARGS = $(addprefix -n ,$(CP_IPS))
CP_ENDPOINT = {{ control_plane_ips_mgmt[0] }}
ARGS ?=
REAPPLY_MODE ?= staged

dist-clean:
	rm -rf clusterconfig/*.yaml clusterconfig/talosconfig kubeconfig talsecret.sops.yaml

talsecret.sops.yaml:
	talhelper gensecret > talsecret.sops.yaml
	sops -e -i talsecret.sops.yaml

gen: talsecret.sops.yaml
	talhelper genconfig

reset:
	${TC} reset --endpoints $(CP_ENDPOINT) --graceful=false $(CP_ARGS) --reboot --wait=false
	$(MAKE) dist-clean

first-apply:
{% for node in cluster_control_plane_nodes | dict2items %}
	${TC} apply-config --insecure --nodes {{ node.value.ifaces.mgmt.ip }} --file clusterconfig/{{ cluster_name }}-cp{{ node.value.idx }}.yaml
{% endfor %}
{% for node in cluster_worker_nodes | dict2items %}
	${TC} apply-config --insecure --nodes {{ node.value.ifaces.mgmt.ip }} --file clusterconfig/{{ cluster_name }}-wrk{{ node.value.idx }}.yaml
{% endfor %}

bootstrap:
	${TC} bootstrap --nodes {{ control_plane_ips_mgmt[0] }}

kubeconf:
	${TC} kubeconfig --nodes {{ control_plane_ips_mgmt[0] }} -f .

# Shutdown all cps right away
shutdown-all:
	${TC} shutdown --wait \
	{% for node in cluster_control_plane_nodes | dict2items %} --nodes {{ node.value.ifaces.mgmt.ip }}{% endfor %} \
	{% for node in cluster_worker_nodes | dict2items %} --nodes {{ node.value.ifaces.mgmt.ip }}{% endfor %}

# Reboots all cps right away
reboot-all-cp:
	${TC} reboot --wait \
	{% for node in cluster_control_plane_nodes | dict2items %} --nodes {{ node.value.ifaces.mgmt.ip }}{% endfor %}

# Reboots all workers right away
reboot-all-workers:
	${TC} reboot --wait \
	{% for node in cluster_worker_nodes | dict2items %} --nodes {{ node.value.ifaces.mgmt.ip }}{% endfor %}

# Reboots cp nodes one at a time
reboot-cp:
{% for node in cluster_control_plane_nodes | dict2items %}
	${TC} reboot --wait --nodes {{ node.value.ifaces.mgmt.ip }}
{% endfor %}

# Reboots worker nodes one at a time
reboot-workers:
{% for node in cluster_worker_nodes | dict2items %}
	${TC} reboot --wait --nodes {{ node.value.ifaces.mgmt.ip }}
{% endfor %}

reapply:
{% for node in cluster_control_plane_nodes | dict2items %}
	${TC} apply-config --mode ${REAPPLY_MODE} --nodes {{ node.value.ifaces.mgmt.ip }} --file clusterconfig/{{ cluster_name }}-cp{{ node.value.idx }}.yaml $(ARGS)
{% endfor %}
{% for node in cluster_worker_nodes | dict2items %}
	${TC} apply-config --mode ${REAPPLY_MODE} --nodes {{ node.value.ifaces.mgmt.ip }} --file clusterconfig/{{ cluster_name }}-wrk{{ node.value.idx }}.yaml $(ARGS)
{% endfor %}

apply-bootstrap-cni:
	${KC} kustomize --enable-helm ./cni | kubectl apply -f -
apply-bootstrap-csr-approver:
	${KC} kustomize --enable-helm ./kubelet-csr-approver | kubectl apply -f -

apply-extras: apply-bootstrap-csr-approver apply-bootstrap-ci

bootstrap-flux:
	cd $(K8S_DIR)
	$(KC) apply --server-side --kustomize ./bootstrap
	sops -d ./bootstrap/age-key.sops.yaml | $(KC) apply -f -
	sops -d ./bootstrap/github-deploy-key.sops.yaml | $(KC) apply -f -
	sops -d ./flux/vars/global-secrets.yaml | $(KC) apply -f -
	$(KC) apply -f ./flux/vars/global-vars.yaml
	$(KC) apply -f ./flux/vars/global-auto-vars.yaml
	$(KC) get pods -n flux-system
	sleep 10
	$(KC) apply --server-side --kustomize ./flux/config
	sleep 10
	flux reconcile -n flux-system source git flux-system
	flux reconcile -n flux-system kustomization cluster


upgrade:
{% for node in cluster_control_plane_nodes | dict2items %}
	${TC} upgrade --wait --nodes {{ node.value.ifaces.mgmt.ip }} --image ${TALOS_IMAGE}
{% endfor %}
{% for node in cluster_worker_nodes | dict2items %}
	${TC} upgrade --wait --nodes {{ node.value.ifaces.mgmt.ip }} --image ${TALOS_IMAGE}
{% endfor %}

upgrade-k8s:
	${TC} --nodes {{ cluster_apiserver_addr }}  upgrade-k8s --to {{ cluster_k8s_version | replace("v", "") }}
