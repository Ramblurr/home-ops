---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app authelia
  namespace: default
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
      replicas: 2
      strategy: RollingUpdate
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: ghcr.io/authelia/authelia
      tag: v4.38.0-beta2
    args:
      [
        "--config",
        "/config/configuration.yml",
        "--config.experimental.filters",
        "expand-env",
      ]
    env:
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_IMPLEMENTATION: custom
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_TIMEOUT: 5s
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_USERS_DN: ou=people
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_GROUPS_DN: ou=groups
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: dc=home,dc=arpa
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_DISPLAY_NAME_ATTRIBUTE: displayName
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_GROUPS_FILTER: "(member={dn})"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_GROUP_NAME_ATTRIBUTE: cn
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_MAIL_ATTRIBUTE: mail
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_URL: "ldap://lldap.default.svc.cluster.local:3890"
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: uid=admin,ou=people,dc=home,dc=arpa
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: lldap-secret
            key: LLDAP_LDAP_USER_PASS
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERNAME_ATTRIBUTE: uid
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERS_FILTER: "(&({username_attribute}={input})(objectClass=person))"
      AUTHELIA_AUTHENTICATION_BACKEND_PASSWORD_RESET_DISABLE: "true"
      AUTHELIA_DEFAULT_REDIRECTION_URL: https://auth.${SECRET_DOMAIN}
      AUTHELIA_DUO_API_DISABLE: "true"
      AUTHELIA_LOG_LEVEL: info
      AUTHELIA_SERVER_DISABLE_HEALTHCHECK: "true"
      AUTHELIA_SERVER_PORT: &port 8000
      AUTHELIA_SESSION_DOMAIN: "${SECRET_DOMAIN}"
      AUTHELIA_SESSION_REDIS_DATABASE_INDEX: 14
      AUTHELIA_SESSION_REDIS_HOST: redis.database.svc.cluster.local
      AUTHELIA_TELEMETRY_METRICS_ADDRESS: "tcp://0.0.0.0:8080"
      AUTHELIA_TELEMETRY_METRICS_ENABLED: "true"
      AUTHELIA_THEME: grey
      AUTHELIA_TOTP_ISSUER: authelia.com
      AUTHELIA_WEBAUTHN_DISABLE: "true"
      AUTHELIA_STORAGE_POSTGRES_DATABASE:
        valueFrom:
          secretKeyRef:
            name: database-authelia-user
            key: DATABASE_NAME
      AUTHELIA_STORAGE_POSTGRES_HOST:
        valueFrom:
          secretKeyRef:
            name: database-authelia-user
            key: HOST
      AUTHELIA_STORAGE_POSTGRES_USERNAME:
        valueFrom:
          secretKeyRef:
            name: database-authelia-user
            key: LOGIN
      AUTHELIA_STORAGE_POSTGRES_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: database-authelia-user
            key: PASSWORD
    envFrom:
      - secretRef:
          name: authelia-secret
    enableServiceLinks: false
    service:
      main:
        ports:
          http:
            port: *port
          metrics:
            enabled: true
            port: 8080
    serviceMonitor:
      main:
        enabled: true
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
    probes:
      liveness: &probes
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /api/health
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness: *probes
      startup:
        enabled: false
    ingress:
      main:
        enabled: true
        ingressClassName: nginx-internal
        annotations:
          external-dns.alpha.kubernetes.io/target: "ingress.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            add_header Cache-Control "no-store";
            add_header Pragma "no-cache";
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
          hajimari.io/icon: mdi:shield-account
        hosts:
          - host: &host "auth.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
    podSecurityContext:
      runAsUser: 2000
      runAsGroup: 2000
      fsGroup: 2000
      fsGroupChangePolicy: OnRootMismatch
    persistence:
      config:
        enabled: true
        type: configMap
        name: authelia-configmap
        subPath: configuration.yml
        mountPath: /config/configuration.yml
        readOnly: false
    topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: *app
    resources:
      requests:
        cpu: 5m
        memory: 10Mi
      limits:
        memory: 200Mi
